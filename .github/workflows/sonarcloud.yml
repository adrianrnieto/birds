name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Install Report Generator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool          
      - name: Start analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #/d:sonar.cs.opencover.reportsPaths=test/coverage/SonarQube.xml \
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"adrianrnieto_birds" \
          /o:"adrianrnieto" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.coverageReportPaths=test/coverage/SonarQube.xml \
          /d:sonar.qualitygate.wait=true
      - name: Build
        run: |
          dotnet restore src/Birds.sln
          dotnet build --no-restore src/Server/Birds.Server.csproj -c Release
          dotnet test --no-restore test/Birds.Unit.Tests/Birds.Unit.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ./test/coverage
          reportgenerator "-reports:test/coverage/*/coverage.cobertura.xml" "-targetdir:./test/coverage" "-reporttypes:SonarQube"
      - name: Finish analysis
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
